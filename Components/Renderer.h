#pragma once
#include <format>
#include <iostream>
#include <memory>
#include <string>

#include "../Systems/RenderingManager.h"
#include "Component.h"
#include "glad/glad.h"

namespace LunaticEngine {
class Renderer;
/**
 * @brief Mesh Info include the full info of a mesh, used by the OpenGL to
 * rendering a mesh. It's generated by the mesh loader and OpenGL.
 */
struct mesh_info {
    unsigned int mTriangleCount;
    unsigned int mVao;
};
class Material {
    friend Renderer;
    unsigned int mShaderProgram;
    // TODO:Finish the rendering system!
   public:
    // TODO:Here need some function to set the shaderProgram.
    void setFLoat();
    void setUniform3x3();
};
class Renderer : Component {
   public:
    void onTick() override;
    void setShaderProgram(const unsigned int& shaderProgram);
    void onStart() override;
    // Renderer(unsigned int vao, unsigned int shaderProgram);
    // Renderer(unsigned int vao);
    //  Super shit design. Maybe we need the Reflaction!!
    std::string toString() override;
    void stringSerial(std::string componentStr) override;

   private:
    bool mHasShaderProgram = false;
    std::shared_ptr<mesh_info> mMeshInfo;
};

}  // namespace LunaticEngine
